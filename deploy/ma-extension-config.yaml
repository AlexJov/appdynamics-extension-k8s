apiVersion: v1
data:
  KafkaMonitor-config.yml: |
    #If SIM is enabled, use this
    metricPrefix: 'Custom Metrics|Kafka'

    #If SIM is not enabled, then use this
    #metricPrefix: 'Server|Component:<Component-ID>|Custom Metrics|Kafka'

    # To know your Component-ID, Please refer the link
    # https://community.appdynamics.com/t5/Knowledge-Base/How-to-troubleshoot-missing-custom-metrics-or-extensions-metrics/ta-p/28695

    # Add your Kafka Instances below
    servers:
      - host: "127.0.0.1"
        port: "9999"
        username: ""
        password: ""
        encryptedPassword:
        displayName: 'Local Kafka Server'

      # Provide the encryption key for the encrypted password
    encryptionKey: ""

    metricPathReplacements:
      - replace: "Percent"
        replaceWith: "%"
      - replace: "OneMinuteRate"
        replaceWith: "1 min Rate"



    # Generate a custom dashboard based on the provided template
    customDashboard:
        enabled: false
        dashboardName: "Kafka Monitor Dashboard"

        # Update the path to the dashboard file.
        pathToSIMDashboard: "monitors/KafkaMonitor/Kafka+Dashboard.json"
        #pathToNormalDashboard: "monitors/SampleMonitor/normalDashboard.json"

    controllerInfo:
        controllerHost: ""
        controllerPort: 8090
        account: ""
        username: ""
        password: ""
        encryptedPassword: ""
        encryptionKey: ""
        controllerSslEnabled: false
        enableOrchestration: false
        uniqueHostId: ""
        accountAccessKey: ""
        machinePath: ""
        simEnabled: true
        applicationName: ""
        tierName: ""
        nodeName: ""

    enableHealthChecks: true


    # Each Kafka server needs 1 thread each, so please configure this according to the number of servers you are monitoring
    # [numberOfThreads] = Number_of_Kafka_Servers_Monitored
    numberOfThreads: 10

    # The configuration of different metrics from all mbeans exposed by Kafka server
    mbeans:
      # Each "objectName" is fully qualified path of the object of the Kafka server
      # For example "kafka.server:type=ReplicaManager,*" will return all objects nested under ReplicaManager type
      # Each of the entries in the "metrics" section is an attribute of the objectName under which it's listed

      - objectName: 'kafka.server:type=ReplicaManager,name=UnderReplicatedPartitions'
        metrics:
          - Value:
              alias: 'UnderReplicatedPartitions'
              multiplier: ''
              delta: false
              aggregationType: 'OBSERVATION'
              timeRollUpType: 'CURRENT'
              clusterRollUpType: 'INDIVIDUAL'

      #    Number of partitions that donâ€™t have an active leader and are hence not writable or readable.
      #  Alert if value is greater than 0.
      - objectName: 'kafka.controller:type=KafkaController,name=OfflinePartitionsCount'
        metrics:
          - Value:
              alias: 'Value'
              multiplier: ''
              delta: false
              aggregationType: 'OBSERVATION'
              timeRollUpType: 'CURRENT'
              clusterRollUpType: 'INDIVIDUAL'

      #    Number of active controllers in the cluster.
      #  Alert if the aggregated sum across all brokers in the cluster is anything other than 1,
      #  because there should be exactly one controller per cluster.
      - objectName: 'kafka.controller:type=KafkaController,name=ActiveControllerCount'
        metrics:
          - Value:
              alias: 'Value'
              multiplier: ''
              delta: false
              aggregationType: 'OBSERVATION'
              timeRollUpType: 'CURRENT'
              clusterRollUpType: 'INDIVIDUAL'

      # Aggregate incoming byte rate.
      - objectName: 'kafka.server:type=BrokerTopicMetrics,name=BytesInPerSec'
        metrics:
          - OneMinuteRate:
              alias: 'OneMinuteRate'
              multiplier: ''
              delta: false
              aggregationType: 'AVERAGE'
              timeRollUpType: 'AVERAGE'
              clusterRollUpType: 'INDIVIDUAL'

      # Aggregate incoming byte rate.
      - objectName: 'kafka.server:type=BrokerTopicMetrics,name=BytesOutPerSec'
        metrics:
          - OneMinuteRate:
              alias: 'OneMinuteRate'
              multiplier: ''
              delta: false
              aggregationType: 'AVERAGE'
              timeRollUpType: 'AVERAGE'
              clusterRollUpType: 'INDIVIDUAL'

      # Request rate.
      - objectName: 'kafka.network:type=RequestMetrics,name=RequestsPerSec,request={Produce|FetchConsumer|FetchFollower}'
        metrics:
          - OneMinuteRate:
              alias: 'OneMinuteRate'
              multiplier: ''
              delta: false
              aggregationType: 'AVERAGE'
              timeRollUpType: 'AVERAGE'
              clusterRollUpType: 'INDIVIDUAL'

      # Produce request rate.
      - objectName: 'kafka.server:type=BrokerTopicMetrics,name=TotalProduceRequestsPerSec'
        metrics:
          - OneMinuteRate:
              alias: 'OneMinuteRate'
              multiplier: ''
              delta: false
              aggregationType: 'AVERAGE'
              timeRollUpType: 'AVERAGE'
              clusterRollUpType: 'INDIVIDUAL'

      #     Fetch request rate.
      - objectName: 'kafka.server:type=BrokerTopicMetrics,name=TotalFetchRequestsPerSec'
        metrics:
          - OneMinuteRate:
              alias: 'OneMinuteRate'
              multiplier: ''
              delta: false
              aggregationType: 'AVERAGE'
              timeRollUpType: 'AVERAGE'
              clusterRollUpType: 'INDIVIDUAL'

      #     Produce request rate for requests that failed.
      - objectName: 'kafka.server:type=BrokerTopicMetrics,name=FailedProduceRequestsPerSec'
        metrics:
          - OneMinuteRate:
              alias: 'OneMinuteRate'
              multiplier: ''
              delta: false
              aggregationType: 'AVERAGE'
              timeRollUpType: 'AVERAGE'
              clusterRollUpType: 'INDIVIDUAL'

      #    Fetch request rate for requests that failed.
      - objectName: 'kafka.server:type=BrokerTopicMetrics,name=FailedFetchRequestsPerSec'
        metrics:
          - OneMinuteRate:
              alias: 'OneMinuteRate'
              multiplier: ''
              delta: false
              aggregationType: 'AVERAGE'
              timeRollUpType: 'AVERAGE'
              clusterRollUpType: 'INDIVIDUAL'

      #     Number of partitions on this broker. This should be mostly even across all brokers.
      - objectName: 'kafka.server:type=ReplicaManager,name=PartitionCount'
        metrics:
          - Value:
              alias: 'Value'
              multiplier: ''
              delta: false
              aggregationType: 'AVERAGE'
              timeRollUpType: 'AVERAGE'
              clusterRollUpType: 'INDIVIDUAL'

    #      Average fraction of time the request handler threads are idle.
    #     Values are between 0 (all resources are used) and 100 (all resources are available)
      - objectName: 'kafka.server:type=KafkaRequestHandlerPool,name=RequestHandlerAvgIdlePercent'
        metrics:
          - OneMinuteRate:
              alias: 'OneMinuteRate'
              multiplier: '100'
              delta: false
              aggregationType: 'AVERAGE'
              timeRollUpType: 'AVERAGE'
              clusterRollUpType: 'INDIVIDUAL'

      #     Average fraction of time the network processor threads are idle.
      #  Values are between 0 (all resources are used) and 100 (all resources are available)
      - objectName: 'kafka.network:type=SocketServer,name=NetworkProcessorAvgIdlePercent'
        metrics:
          - Value:
              alias: 'Value'
              multiplier: '100'
              delta: false
              aggregationType: 'AVERAGE'
              timeRollUpType: 'AVERAGE'
              clusterRollUpType: 'INDIVIDUAL'

      #   Size of the request queue. A congested request queue will not be able to process incoming or outgoing requests
      - objectName: 'kafka.network:type=RequestChannel,name=RequestQueueSize'
        metrics:
          - Value:
              alias: 'Value'
              multiplier: ''
              delta: false
              aggregationType: 'OBSERVATION'
              timeRollUpType: 'CURRENT'
              clusterRollUpType: 'INDIVIDUAL'

      #   The ZooKeeper session has expired. When a session expires, we can have leader changes and even a new controller.
      #  It is important to keep an eye on the number of such events across a Kafka cluster and if the overall number is high
      - objectName: 'kafka.server:type=SessionExpireListener,name=ZooKeeperExpiresPerSec'
        metrics:
          - OneMinuteRate:
              alias: 'OneMinuteRate'
              multiplier: ''
              delta: false
              aggregationType: 'OBSERVATION'
              timeRollUpType: 'CURRENT'
              clusterRollUpType: 'INDIVIDUAL'

      #   Metric Per Topic
      - objectName: 'kafka.server:type=BrokerTopicMetrics,name=*,topic=*'
        metrics:
          - OneMinuteRate:
              alias: 'OneMinuteRate'
              multiplier: ''
              delta: false
              aggregationType: 'AVERAGE'
              timeRollUpType: 'AVERAGE'
              clusterRollUpType: 'INDIVIDUAL'

      #    When a broker is brought up after a failure, it starts catching up by reading from the leader.
      #    Once it is caught up, it gets added back to the ISR.
      - objectName: 'kafka.server:type=ReplicaManager,name=IsrExpandsPerSec'
        metrics:
          - OneMinuteRate:
              alias: 'OneMinuteRate'
              multiplier: ''
              delta: false
              aggregationType: 'AVERAGE'
              timeRollUpType: 'AVERAGE'
              clusterRollUpType: 'INDIVIDUAL'

      #    If a broker goes down, ISR for some of the partitions will shrink.
      #  When that broker is up again, ISR will be expanded once the replicas are fully caught up.
      #  Other than that, the expected value for both ISR shrink rate and expansion rate is 0.
      - objectName: 'kafka.server:type=ReplicaManager,name=IsrShrinksPerSec'
        metrics:
          - OneMinuteRate:
              alias: 'OneMinuteRate'
              multiplier: ''
              delta: false
              aggregationType: 'AVERAGE'
              timeRollUpType: 'AVERAGE'
              clusterRollUpType: 'INDIVIDUAL'

      #   JVM Metrics
      - objectName: 'java.lang:type=Memory'
        metrics:
          - HeapMemoryUsage.committed:
              alias: 'Heap Memory Usage | Committed (bytes)'
              multiplier: ''
              delta: false
              aggregationType: 'AVERAGE'
              timeRollUpType: 'AVERAGE'
              clusterRollUpType: 'INDIVIDUAL'

          - HeapMemoryUsage.max:
              alias: 'Heap Memory Usage | Max (bytes)'
              multiplier: ''
              delta: false
              aggregationType: 'AVERAGE'
              timeRollUpType: 'AVERAGE'
              clusterRollUpType: 'INDIVIDUAL'

          - HeapMemoryUsage.used:
              alias: 'Heap Memory Usage | Used (bytes)'
              multiplier: ''
              delta: false
              aggregationType: 'AVERAGE'
              timeRollUpType: 'AVERAGE'
              clusterRollUpType: 'INDIVIDUAL'

          - NonHeapMemoryUsage.committed:
              alias: 'Non Heap Memory Usage | Committed (bytes)'
              multiplier: ''
              delta: false
              aggregationType: 'AVERAGE'
              timeRollUpType: 'AVERAGE'
              clusterRollUpType: 'INDIVIDUAL'
  LogMonitor-config.yml: |-
    # Metric prefix to show metrics in one tier (HIGHLY RECOMMENDED)
    # Please follow the Metric Path section of https://docs.appdynamics.com/display/PRO42/Build+a+Monitoring+Extension+Using+Java for instructions on retrieving the tier ID
    #metricPrefix: "Server|Component:<TIER_ID>|Log Monitor|"

    #Metric Prefix when SIM is enabled"
    metricPrefix: "Custom Metrics|Log Monitor6|"

    logs:
    - displayName: "MAlog"
      logDirectory: "/opt/appdynamics/logs"
      logName: "machine-agent.log"
      encoding: ""      #Not mandatory. Supported types: UTF8, UTF16, UTF16-LE, UTF16-BE, UTF32, UTF-32LE, UTF32-BE
      searchStrings:
      #displayName Should be unique across the various patterns.
      - displayName: "error"
        pattern: "error"
        matchExactString: false
        caseSensitive: false
        printMatchedString: false

    #Replaces characters in metric name with the specified characters.
    # "replace" takes any regular expression
    # "replaceWith" takes the string to replace the matched characters
    metricCharacterReplacer:
    - replace: ":"
      replaceWith: ";"
    - replace: "\\|"
      replaceWith: "#"
    - replace: "\\,"
      replaceWith: "#"

    # Number of concurrent threads
    numberOfThreads: 20

    #Thread timeout in seconds
    threadTimeOut: 60

    sendDataToEventsService: false

    # This adds the specified number of lines after the line in which a log match is found to the event body
    # while sending data to the events service
    logMatchOffset: 0

    # This field contains the various parameters required to initiate a connection and send data to the AppDynamics Events Service.
    eventsServiceParameters:
      host: ""
      port:
      globalAccountName: ""
      eventsApiKey: ""
      useSSL: false

    # The sections [customDashboard] and [controllerInfo] need to be enabled for uploading dashboard to the controller UI
    customDashboard:
      enabled: false
      dashboardName: "Log Monitor Dashboard"
      sslCertCheckEnabled: false
      # Update the path to the dashboard file.
      pathToSIMDashboard: "monitors/LogMonitor/SIMDashboard.json"
      pathToNormalDashboard: "monitors/LogMonitor/APMDashboard.json"
      periodicDashboardCheckInSeconds: 300

    # If any of the following fields are not set, the values of the specific fields are set from the system properties of the corresponding fields as specified in the comments.
    # If the system properties are not set for the field, then the data is retrieved from machine agent configFile. Please refer to ControllerInfoFactory for more details.
    controllerInfo:
      controllerHost: "" # -Dappdynamics.controller.hostName
      controllerPort: 8090 # -Dappdynamics.controller.port
      controllerSslEnabled: false # -Dappdynamics.controller.ssl.enabled
      enableOrchestration: false # N/A
      uniqueHostId: "" # -Dappdynamics.agent.uniqueHostId
      username: "" # -Dappdynamics.agent.monitors.controller.username
      password: "" # -Dappdynamics.agent.monitors.controller.password
      encryptedPassword: "" # -Dappdynamics.agent.monitors.controller.encryptedPassword
      accountAccessKey: "" # -Dappdynamics.agent.accountAccessKey
      account: "" # -Dappdynamics.agent.accountName
      machinePath: "" # -Dappdynamics.machine.agent.hierarchyPath
      simEnabled: false # -Dappdynamics.sim.enabled
      applicationName: "" # -Dappdynamics.agent.applicationName
      tierName: "" # -Dappdynamics.agent.tierName
      nodeName: "" # -Dappdynamics.agent.nodeName

    enableHealthChecks: true # If not set, will be retrieved from "-Dappdynamics.agent.monitors.healthchecks.enable=true". Defaults to true.
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: ma-extension-config
  namespace: appdynamics
